

/*



grid = es un valor del display
son un conjunto de grillas

grid container = es todo el contenedor completo
grid item = cada elemento que forma parte del grid container
grid cell = cada celda
grid tracks = colums y rows
column = columna
row = fila
grid area = son areas consectivas que seleccionamos o definimos
grid line = lineas que tiene el grid container
column line = lineas de las columnas (verticales)
row line = lineas de las filas (horizontales)

grid-template = grid row + grid colum
grid-template-rows = cuantas filas va a tener 
grid-template-colums = cuantas columnas va a tener



auto = 
fr = el espacio se reparte (es un flex en grid)
*/
html {
	scroll-behavior: smooth;
}

body {
	background: radial-gradient(circle, #fff, #aaa);
	padding: 15px;
}

.grid-container {
	display: grid;
	grid-template-rows: 150px 150px 150px;
	grid-template-columns: 150px 150px 150px 1fr;
	border: 3px solid #fff;
	grid-gap: 10px;
	background-color: #000;
}

.grid-item {
	border: 2px solid #fff;
}



/*
grid-gap = es como un margin entre cada celda (grid-column-gap + grid-row-gap)
grid-row = cuantas filas ocupa (grid-row-start + grid-row-end)
grid-column = cuantas columnas ocupa (grid-column-start + grid-column-end)

span = dice cuantas columnas o filas ocupar sin tener que contar vos
*/
.grid-item:first-child {
	background-color: #800;
	grid-column: 1/3;
	grid-row: 1/3;
}

.grid-item:nth-child(2) {
	background-color: #398;
	grid-column: 3/5;
}

.grid-item:nth-child(3) {
	background-color: #194;
	grid-column: 3/span 2;
	/*
	comienza en la linea 3 y ocupa dos columnas
	*/
}


/*
repeat() = repite un valor una cierta cantidad de veces

grid implicito = es la parte de la grilla que creaste vos
grid explicito = es la parte de la grilla que se creo por falta de espacio sola
grid-auto-rows = modifica las filas del grid implicito
grid-auto-colums = modifica las columnas del gfrid implicito
grid-auto-flow = define como se comporta el grid implicito (columna o fila)
dense = mete el objeto mas cercano que quepa en el espacio vacio
*/

.grid-container2 {
	display: grid;
	grid-template-columns: repeat(3, 150px);
	grid-template-rows: repeat(3, 150px);
	grid-auto-rows: 150px;
	grid-auto-flow: row;
	background-color: #444;
	grid-auto-flow: dense;

}

.grid-item2 {
	border: 2px solid #fff;
	background-color: black;
	color: white;
}

.grid-item2:first-child {
	grid-column: 1/3;
}

.grid-item2:nth-child(2) {
	grid-column: 4/7;
}




/*
min-content = va a valero lo menos posible
max-content =  va a valer lo mas posible
minmax = se ajusta al contenido
auto-fill = crea la cantidad de columnas que pueda que coincidan con las caracteristicas (si no hay crea nuevas)
auto-fit = reparte el espacio esntre las que puede
*/


.grid-container3 {
	display: grid;
	grid-template-columns: repeat(auto-fill, minmax(100px, 150px));
	grid-template-rows: repeat(3, 200px);

	grid-auto-rows: 150px;
	background-color: #444;

}

.grid-item3 {
	border: 2px solid #fff;
	background-color: black;
	color: white;
}


/*
justify-items =  alinea horizontalmente
align-items =  alinea verticalmente
justify-content = posiciona las tablas
align-content = posiciona las filas
content puede contener space-arround, evenly, space-between 

align-self = alinea los items en  el eje y
justify-self = alinea los items en  el eje x
place-self = justify self + align self
order = posiciona las celdas
*/

.grid-container4 {
	display: grid;
	grid-template-columns: repeat(3, 200px);
	grid-template-rows: repeat(3, 200px);
	grid-auto-rows: 150px;
	background-color: #444;
	/*
	justify-items: center;
	align-items: center;
	*/
	justify-content: space-evenly;
	align-content: space-evenly;
	align-items: center;
	justify-items: center; 
}

.grid-item4 {
	border: 2px solid #fff;
	background-color: black;
	color: white;
	padding: 50px;
}


.grid-item4:first-child {
	align-self: flex-start;
	justify-self: start; 
	background-color: #500;
	/*
	order: 1; (se va al final xque tiene el valor mas alto)
	*/
}


.grid-item4:last-child {
	align-self: flex-end;
	justify-self: end; 
	background-color: #500;
}

.grid-item4:nth-child(3) {
	justify-self: flex-end;
	align-self: flex-start;
	background-color: #500;
}

.grid-item4:nth-child(7) {
	justify-self: flex-start;
	align-self: flex-end;
	background-color: #500;
}


.grid-item4:nth-child(6) {
	justify-self: flex-start;
}


.grid-item4:nth-child(4) {
	justify-self: flex-end;
}


.grid-item4:nth-child(5) {
	background-color: #050;
}





/*
grid-template-areas = define cada area de cada elemento
grid-area = define cual de todas las areas creadas es la suya
*/

.grid-container5 {
	display: grid;
	margin: 10px;
	background-color: #444;
	grid-template-areas:
	 "header header header"
	  "aside main main"
	   "aside main main"
	    "footer footer footer";
	    grid-template-rows: repeat(auto-fill, 1fr);
	    height: 500px;
	    border: 3px solid #000;
}

.grid-header li {
	display: inline-block;
}

.grid-item5 {
	padding: 20px;
}

.grid-header {
	background-color: #f96;
	grid-area: header;
}

.grid-main {
	background-color: #96f;
	grid-area: main;
}

.grid-aside {
	background-color: #f69;
	grid-area: aside;
}

.grid-footer {
	background-color: #6f9;
	grid-area: footer;
}

/*

para nombrar lineas se usan corchetes
grid-template = grid-template row + grid-template column + grid-template-area
grid = todo lo grid aplicable al container
*/

.grid-container6 {
	   background-color: #000;
	   border: 3px  solid#009;
	   display: grid;
	 grid-template-rows: 
	   [linea-uno]
	   200px
	   [linea-dos]
	   200px
	   [linea-tres]
	   200px
	   [fin-de-grid];
    grid-template-columns: 
	   [comienzo-de-columna]
	   200px
	   [columna-dos]
	   200px
	   [columna-tres]
	   200px
	   [final-de-columna];
}

.grid-item6 {
	border: 3px solid blue;
	color: blue;
}

.grid-item6:first-child {
	grid-row: linea-uno / fin-de-grid;
}






